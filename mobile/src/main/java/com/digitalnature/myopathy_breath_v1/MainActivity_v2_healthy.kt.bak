package com.digitalnature.myopathy_breath_v1

import android.Manifest
import android.annotation.SuppressLint
import android.bluetooth.*
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import android.os.Handler
import android.os.HandlerThread
import android.provider.Settings
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.core.app.ActivityCompat
import com.google.android.gms.wearable.DataClient
import com.google.android.gms.wearable.DataMapItem
import com.google.android.gms.wearable.Wearable
import kotlinx.coroutines.runBlocking
import quevedo.soares.leandro.blemadeeasy.BLE
import java.time.LocalDateTime
import java.util.Timer
import java.util.TimerTask

class MainActivity_v2_healthy : AppCompatActivity() {



    private lateinit var dataClient : DataClient
    private lateinit var textView : TextView
    private lateinit var errorView : TextView
    private lateinit var sendButton : Button
    private lateinit var node_id : String
    private lateinit var handlerThread : HandlerThread
    private var last_value_serial : Pair<ByteArray? , LocalDateTime> = Pair(null, LocalDateTime.now())
    private var last_value_heartrate : Pair<Double , LocalDateTime> = Pair(0.0, LocalDateTime.now())
    private var permit_fine_loc: Boolean = false
    private var permit_blue_scan: Boolean = false

    private var BLE_conn_status : Int = 0
    // 0: disconn, 1: connecting, 2: connected
    private lateinit var ble : BLE

    private val timer_ui_refresh = Timer("UI_refresh_timer")
    private val timer_BLE_get = Timer("BLE_timer")

    private val textview_template = "last serial written: %s , %s \n last watch read: %s , %s "

    private val MBLadapter: BluetoothAdapter? by lazy(LazyThreadSafetyMode.NONE) {
        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothManager.adapter
    }
    private val BluetoothAdapter.isDisabled: Boolean
        get() = !isEnabled

    @SuppressLint("VisibleForTests")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        Log.d("-","setContentView Done")
        // Get permission


        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            permit_fine_loc = shouldShowRequestPermissionRationale(Manifest.permission.ACCESS_FINE_LOCATION)
        }
        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.BLUETOOTH_SCAN
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            permit_blue_scan = shouldShowRequestPermissionRationale(Manifest.permission.BLUETOOTH_SCAN)
        }

        ble = BLE(componentActivity = this)

        start_listen()

        textView = findViewById(R.id.DataShow)
        textView.setText(R.string.waiting)

        errorView = findViewById(R.id.ErrorStatusShow)
        errorView.setText(R.string.error_placeholder)


        // init scan
        timer_BLE_get.schedule(
            object :TimerTask(){
                override fun run() {
                    scanBLEDevice2Write()
                }

            },
            250L,
        )


        // Update
        timer_ui_refresh.scheduleAtFixedRate(
            object : TimerTask(){
                override fun run() {
                    val text = String.format(
                        textview_template,
                        String(last_value_serial.first?: ByteArray(0) ),
                        last_value_serial.second,
                        last_value_heartrate.first,
                        last_value_heartrate.second
                    )
                    textView.setText(text)
                }
            },
            1000L,
            500L
        )

    }



    private fun showDialogToGetPermission() {
        Log.d("jz_permit","fine location permission")
        val builder = AlertDialog.Builder(this)
        builder.setTitle("Permisisons request")
            .setMessage("We need the location permission for some reason. " +
                    "You need to move on Settings to grant some permissions")

        builder.setPositiveButton("OK") { dialogInterface, i ->
            val intent = Intent(
                Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                Uri.fromParts("package", packageName, null))
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            startActivity(intent)   // 6
        }
        builder.setNegativeButton("Later") { dialogInterface, i ->
            // ignore
        }
        val dialog = builder.create()
        dialog.show()
    }

    private fun showDialogToGetBluetoothScanPermission() {
        Log.d("jz_permit","BLE permission")
        val builder = AlertDialog.Builder(this)
        builder.setTitle("Permisisons request")
            .setMessage("We need the Bluetooth scan permission for some reason. " +
                    "You need to move on Settings to grant some permissions")

        builder.setPositiveButton("OK") { dialogInterface, i ->
            val intent = Intent(
                Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                Uri.fromParts("package", packageName, null))
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            startActivity(intent)   // 6
        }
        builder.setNegativeButton("Later") { dialogInterface, i ->
            // ignore
        }
        val dialog = builder.create()
        dialog.show()
    }

    fun start_listen() {
        handlerThread = object : HandlerThread("BackgroundThread") {
            override fun onLooperPrepared() {
                val handler = Handler(looper)
                val runnable = object : Runnable {
                    override fun run() {
                        get_data_task()
                        handler.postDelayed(this,50)
                    }
                }
                handler.postDelayed(runnable,300)
            }
        }
        handlerThread.start()
        //FIXME

    }

    @SuppressLint("VisibleForTests")
    fun get_data_task(){
        this.dataClient = Wearable.getDataClient(this)
        //val dataItemTask = dataClient.getDataItems(Uri.parse("wear://%s/health".format(node_id))) //wear://<node_id>/<path>
        val dataItemTask = dataClient.getDataItems(Uri.parse("wear://*/health"))
        dataItemTask.addOnSuccessListener { dataItems ->
            for (dataItem in dataItems) {
                Log.d("phone-got-data","$dataItem")
                if (dataItem.uri.path == "/health") {
                    val myData = DataMapItem.fromDataItem(dataItem).dataMap.getDouble("heartrate")
                    // do something with myData
                    this.last_value_heartrate = Pair(myData, LocalDateTime.now())
                    //textView.setText(String.format("Current Heartrate : %.1f",myData))
                }
            }
            dataItems.release()
        }

    }

    private val bluetoothAdapter: BluetoothAdapter by lazy {
        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothManager.adapter
    }


// It is important to keep in mind that every single one of the provided arguments of the function shown above, are optionals! Therefore, you can skip the ones that you don't need.



    // Stops scanning after 10 seconds.
    private val SCAN_PERIOD: Long = 10000

    @SuppressLint("MissingPermission")
    private fun scanBLEDevice2Write() {
        if (BLE_conn_status == 1){ // in connection
            Log.d("jz","BLE_conn_status == 1 - abort")
            return
        }

        ble.scanForAsync(
            // You only need to supply one of these, no need for all of them!
            macAddress = "00:0C:BF:0A:78:4C",
            //name = "HC-02",
            //service = "00000000-0000-0000-0000-000000000000",

            onFinish = { connection ->
                if (connection != null) {
                    BLE_conn_status = 1
                    // And you can continue with your code
                    connection.write("49535343-ACA3-481C-91EC-D85E28A60318", "X")
                    // send a string, get updated value.
                    // TODO:
                    Log.i("jz","sent")
                    /*connection.readAsync("49535343-ACA3-481C-91EC-D85E28A60318"
                    ) { barr ->
                        this.last_value_serial = Pair(barr,LocalDateTime.now())
                        if (barr!= null) { Log.v("got feedback ",String(barr))}
                        Log.d("jz","read feedback")
                    }*/
                    runBlocking {

                        connection.close()
                        BLE_conn_status = 0

                    } // wait for it


                } else {
                    Log.d("jz","null conn")
                    // Show an Alert or UI with your preferred error message about the device not being available
                    BLE_conn_status = 0

                }
                timer_BLE_get.schedule(
                    object :TimerTask(){
                        override fun run() {
                            scanBLEDevice2Write()
                        }

                    },
                    250L,
                )
            },

            onError = { errorCode ->
                // Show an Alert or UI with your preferred error message about the error
                Toast.makeText(this@MainActivity_v2_healthy, String.format("error : %{}",errorCode),Toast.LENGTH_LONG).show()
                BLE_conn_status = 0
            }
        )

// It is important to keep in mind that every single one of the provided arguments of the function shown above, are optionals! Therefore, you can skip the ones that you don't need.
    }




    override fun onDestroy() {


        handlerThread.quit()
        super.onDestroy()

    }




}